module uim.caches.classes.engines.engine;

import uim.caches;

@safe:

// Storage engine for UIM caching
class DCacheEngine : UIMObject, ICacheEngine {
  mixin(CacheEngineThis!());

  override bool initialize(Json[string] initData = null) {
    if (!super.initialize(initData)) {
      return false;
    }

    /**
        * The default cache configuration is overridden in most cache adapters. These are
        * the keys that are common to all adapters. If overridden, this property is not used.
        *
        * - `duration` Specify how long entries in this cache configuration last.
        * - `groups` List of groups or "tags" associated to every key stored in this config.
        *  handy for deleting a complete group from cache.
        * - `prefix` Prefix appended to all entries. Good for when you need to share a keyspace
        *  with either another cache config or another application.
        * - `warnOnWriteFailures` Some engines, such as ApcuEngine, may raise warnings on
        *  write failures.
        */
    /*
        if (configuration.hasEntry("groups")) {
            configuration.getStringArray("groups").sort; // TODO _groupPrefix = repeat("%s_", configuration.getStringArray("groups").length);
        }
        /* if (!configuration.isNumeric("duration")) {
            // TODO configuration.setEntry("duration", configuration.getEntry("duration").toTime - time());
        } */

    configuration
      .setEntry("duration", 3600)
      .setEntry("groups", Json.emptyArray)
      .setEntry("prefix", "uim_")
      .setEntry("warnOnWriteFailures", true);

    return true;
  }

  // Group prefixes to be prepended to every key in this cache engine
  mixin(TProperty!("string", "groupName"));

  mixin(TProperty!("long", "timeToLive"));

  // #region entries
  // Obtains multiple cache entries by their unique keys.
  ICacheEngine entries(Json[string] newItems) {
    clearEntries();
    updateEntries(newItems.dup);
    return this;
  }

  Json[string] entries(string[] keysToUse = null) {
    if (keysToUse.isEmpty) {
      return entries(keys);
    }

    Json[string] results;
    keysToUse
      .each!((key) {
        /* if (auto item = read(key)) {
                    results.set(key, item);
                } */
      });
    return results;
  }

  // #region keys
  abstract string[] keys();
  // #endregion keys

  // Persists a set of key: value pairs in the cache, with an optional TTL.
  // bool entries(Json[string] entries) {
    // TODO ensureValidType(myvalues, CHECK_KEY);
    /*
            Json restoreDuration = Json(null); 
            if (timeToLive != 0) {
                restoreDuration = configuration.hasEntry("duration");
                configuration.setEntry("duration", timeToLive);
            }
            try {
                return entries.byKeyValue
                    .all!(kv => updateKey(aKey, myvalue));
            } finally {
                if (restoreDuration.isNull) {
                    configuration.setEntry("duration", restoreDuration);
                }
            }
    return false;
  } */
  // #region entries

  // #region read
  // Fetches the value for a given key from the cache.
  Json[] read(string[] keys, Json defaultValue = Json(null)) {
    return keys.map!(key => read(key, defaultValue)).array;
  }

  Json read(string key, Json defaultValue = Json(null)) {
    return Json(null);
  }

  // #endregion read

  // #region set
  // Persists data in the cache, uniquely referenced by the given key with an optional expiration timeToLive time.
  mixin(SetMethods!("ICacheEngine", "Entries", "Entry", "string", "Json"));

  ICacheEngine setEntry(string key, Json entry) {
    return this;
  }
    
  unittest {
    // TODO
  }
  // #endregion set

  // #region merge
  // Persists data in the cache, uniquely referenced by the given key with an optional expiration timeToLive time.
  mixin(MergeMethods!("ICacheEngine", "Entries", "Entry", "string", "Json"));

  ICacheEngine mergeEntry(string key, Json entry) {
    if (!hasEntry(key)) setEntry(key, entry);
    return this;
  }

  unittest {
    // TODO
  }
  // #endregion merge

  // #region update
  // Persists data in the cache, uniquely referenced by the given key with an optional expiration timeToLive time.
  mixin(UpdateMethods!("ICacheEngine", "Entries", "Entry", "string", "Json"));

  ICacheEngine updateEntry(string key, Json entry) {
    if (hasEntry(key)) setEntry(key, entry);
    return this;
  }
    
  unittest {
    // TODO
  }
  // #endregion update

  // Increment a number under the key and return incremented value
  long increment(string key, int incValue = 1) {
    return 0;
  }
  // Decrement a number under the key and return decremented value
  long decrement(string key, int decValue = 1) {
    return 0;
  }

  // #region remove
  // Delete all keys from the cache
  bool clear() {
    return removeKey(keys);
  }

  // Deletes multiple cache entries as a list
  mixin(RemoveMethods!("ICacheEngine", "Entries", "Entry", "string"));

  // Delete a key from the cache
  ICacheEngine removeEntry(string key) {
    return this;
  }
  // #endregion remove

  /**
     * Clears all values belonging to a group. Is up to the implementing engine
     * to decide whether actually delete the keys or just simulate it to achieve the same result.
     * /
    abstract bool clearGroup(string groupName);

    /**
     * Does whatever initialization for each group is required and returns the `group value` for each of them, 
     * this is the token representing each group in the cache key
     * /
    string[] groups() {
        return configuration.getStringArray(
            "groups");
    }

    /**
     * Generates a key for cache backend usage.
     *
     * If the requested key is valid, the group prefix value and engine prefix are applied.
     * Whitespace in keys will be replaced.
     * /
    protected string internalKey(string key) {
        string prefix = groupName
            ? groups().join("_").md5 : "";

        // TODO auto changedKey = key.replaceAll.regex(r"/[\s]+/", "_");
        return configuration.getStringEntry(
            "prefix") ~ prefix; //  ~ changedKey;
    }

    /**
     * Cache Engines may trigger warnings if they encounter failures during operation,
     * if option warnOnWriteFailures is set to true.
     * /
    protected void warning(
        string warningMessage) {
        if (!configuration..getBooleanEntry(
                "warnOnWriteFailures")) {
            return;
        }
        // TODO triggerWarning(warningMessage);
    }

    // Convert the various expressions of a TTL value into duration in seconds
    protected long duration(
        long timeToLive = 0) {
        return timeToLive == 0
            ? configuration.getLongEntry(
                "duration") : timeToLive;
    } */
}
