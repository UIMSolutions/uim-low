module uim.caches.classes.engines.redis;

import uim.caches;

@safe:
// Redis storage engine for cache.
class DRedisCacheEngine : DCacheEngine {
    mixin(CacheEngineThis!("Redis")); 

    override bool initialize(Json[string] initData = null) {
        if (!super.initialize(initData)) {
            return false;
        }

        /**
        * The default config used unless overridden by runtime configuration
        *
        * - `database` database number to use for connection.
        * - `duration` Specify how long items in this cache configuration last.
        * - `groups` List of groups or 'tags' associated to every key stored in this config.
        *  handy for deleting a complete group from cache.
        * - `password` Redis server password.
        * - `persistent` Connect to the Redis server with a persistent connection
        * - `port` port number to the Redis server.
        * - `prefix` Prefix appended to all entries. Good for when you need to share a keyspace
        *  with either another cache config or another application.
        * - `scanCount` Number of keys to ask for each scan (default: 10)
        * - `server` URL or IP to the Redis server host.
        * - `timeout` timeout in seconds (float).
        * - `unix_socket` Path to the unix socket file (default: false)
        *
        */

        // TODO
        /* if (!extension_loaded("redis")) {
            throw new DException("The `redis` extension must be enabled to use RedisEngine.");
        } */
        
        if (Json host = initData.getJson("host")) {
            initData["server"] = host;
        } 

        configuration
            .setEntry("database", 0)
            .setEntry("duration", 3600)
            .setEntry("groups", Json.emptyArray)
            .setEntry("persistent", true)
            .setEntry("port", 6379)
            .setEntry("prefix", "uim_")
            .setEntry("host", Json(null))
            .setEntry("server", "127.0.0.1")
            .setEntry("timeout", 0)
            .setEntry(["password", "unix_socket"], false)
            .setEntry("scanCount", 10);

        return true;
        // TODO return _connect();
    }

    // Redis wrapper.
    // TODO protected DRedis _redis;
    
    // Connects to a Redis server
    protected bool _connect() {
        bool result;
        // TODO
        /* try {
            _redis = new DRedis();
            if (!configuration.isEmptyEntry("unix_socket")) {
                result = _redis.connect(configuration.getEntry("unix_socket"));
            } else if (configuration.isEmptyEntry("persistent")) {
                result = _redis.connect(
                    configuration.getEntry("server"),
                    configuration.getLongEntry("port"),
                    configuration.getLongEntry("timeout")
               );
            } else {
                persistentId = configuration.getStringEntry("port") ~ configuration.getStringEntry("timeout") ~ configuration.getStringEntry("database");
                result = _redis.pconnect(
                    configuration.getEntry("server"),
                    configuration.getLongEntry("port"),
                    configuration.getLongEntry("timeout"),
                    persistentId
               );
            }
        } catch (RedisException anException) {
            if (class_hasKey(Log.classname)) {
                Log.error("RedisEngine could not connect. Got error: " ~  anException.message());
            }
            return false;
        }
        if (result && configuration.hasEntry("password")) {
            result = _redis.auth(configuration.getStringEntry("password"));
        }
        if (result) {
            result = _redis.select(configuration.getLongEntry("database"));
        } */
        return result;
    }
    
    // Write data for key into cache.
    override bool updateKey(string key, Json dataToCache) {
        auto internKey = internalcorrectKey(key);
        auto serializedData = serialize(dataToCache);

        auto myDuration = duration(timeToLive);
        return myDuration == 0
            ? _redis.set(internKey, serializedData) 
            : _redis.setEx(internKey, myDuration, serializedData);
    }
    
    // Read a key from the cache
    override Json read(string key, Json defaultValue = Json(null)) {
        auto internKey = internalcorrectKey(key);
        auto value = _redis.get(internKey);
        return value.isNull
            ? defaultValue  
            : _unserialize(value);
    }
    
    // Increments the value of an integer cached key & update the expiry time
    override long increment(string key, int incOffset = 1) {
        auto aKey = internalKey(itemKey);
        auto aDuration = configuration.getLongEntry("duration");

        /* 
        auto aValue = _redis.incrBy(aKey, incOffset);
        if (aDuration > 0) {
           _redis.expire(aKey, aDuration);
        } */
        return 0; // aValue;
    }
    
    // Decrements the value of an integer cached key & update the expiry time
    override long decrement(string itemKey, int decValue = 1) {
        auto aDuration = configuration.getEntry("duration");
        auto aKey = internalKey(itemKey);

        auto aValue = _redis.decrBy(aKey,  decValue);
        if (aDuration > 0) {
           _redis.expire(aKey, aDuration);
        }
        return aValue;
    }
    
    // Delete a key from the cache
    override ICacheEngine removeKey(string key) {
        auto key = internalKey(dataIdentifier);
        _redis.del(key);
        return this;
    }
    
    /**
     * Delete a key from the cache asynchronously
     * Just unlink a key from the cache. The actual removal will happen later asynchronously.
     */
    /* override  */bool deleteAsync(string dataIdentifier) {
        auto key = internalKey(dataId);
        return _redis.unlink(key) > 0;
    }
    
    // Delete all keys from the cache
    override bool clear() {
       _redis.setOption(Redis.OPT_SCAN, to!string(Redis.SCAN_RETRY));

        // TODO
        /* override bool isAllDeleted = true;
        auto anIterator = null;
        auto somePattern = configuration.getStringEntry("prefix") ~ "*";

        while (true) {
            auto someKeys = _redis.scan(anIterator,  somePattern, configuration.getLongEntry("scanCount"));

            if (someKeys == false) {
                break;
            }
            someKeys.each!((key) {
                 isDeleted = (_redis.del(aKey) > 0);
                 isAllDeleted = isAllDeleted &&  isDeleted;
            });
        } */

        return isAllDeleted;
    }
    
    /**
     * Delete all keys from the cache by a blocking operation
     *
     * Faster than clear() using unlink method.
     */
    // TODO
    /* 
    override bool clearBlocking() {
       _redis.setOption(Redis.OPT_SCAN, /* (string) * /Redis.SCAN_RETRY);

        override bool isAllDeleted = true;
        auto anIterator = null;
        string somePattern = configuration.getStringEntry("prefix") ~ "*";
        while (true) {
            auto someKeys = _redis.scan(anIterator,  somePattern, configuration.getLongEntry("scanCount"));

            if (someKeys == false) {
                break;
            }
            someKeys.each!((key) {
                override bool isDeleted = (_redis.unlink(key) > 0);
                isAllDeleted = isAllDeleted &&  isDeleted;
            });
        }
        return isAllDeleted;
    }*/
    
    /**
     * Write data for key into cache if it doesn`t exist already.
     * If it already exists, it fails and returns false.
     */
    override bool add(string dataId, Json dataToCache) {
        auto aDuration = configuration.getEntry("duration");
        auto aKey = internalKey(dataId);
        auto aValue = serialize(dataToCache);

        return false; // TODO (_redis.set(aKey, aValue, ["nx", "ex": aDuration]));
    }
    
    /**
     * Returns the `group value` for each of the configured groups
     * If the group initial value was not found, then it initializes the group accordingly.
     */
    override string[] groups() {
        string[] result;
        configuration.getEntry("groups").each!((group) {
            auto aValue = _redis.get(configuration.getStringEntry("prefix") ~  group);
            if (!aValue) {
                aValue = serialize(1);
               _redis.set(configuration.getStringEntry("prefix") ~  group, aValue);
            }
            result ~= anGroup ~ aValue;
        });

        return result;
    }
    
    /**
     * Increments the group value to simulate deletion of all keys under a group
     * old values will remain in storage until they expire.
    */
    override bool clearGroup(string groupName) {
        return /* (bool) */_redis.incr(configuration.getStringEntry("prefix") ~  groupName);
    }
    
    /**
     * Serialize value for saving to Redis.
     *
     * This is needed instead of using Redis' in built serialization feature
     * as it creates problems incrementing/decrementing intially set integer value.
     */
    protected string serialize(Json valueToSerialize) {
        return isInt(valueToSerialize) 
            ? to!string(valueToSerialize)
            : serialize(valueToSerialize);
    }
    
    // Unserialize string value fetched from Redis.
    protected Json unserialize(string valueToUnserialize) {
        return Json(null);
        /*
        return preg_match("/^[-]?\d+$/", valueToUnserialize)
            ? /* (int) * / valueToUnserialize
            : unserialize(valueToUnserialize); */
    }
    
    // Disconnects from the redis server
    auto close() {
        if (configuration.isEmptyEntry("persistent")) {
           _redis.close();
        }
    }
}
mixin(CacheEngineCalls!("Redis")); 
