module uim.caches.classes.engines.apcu;

import uim.caches;

@safe:

// APCu storage engine for cache
class DApcuCacheEngine : DCacheEngine {
  mixin(CacheEngineThis!("Apcu"));

  // Contains the compiled group names (prefixed with the global configuration prefix)
  protected string[] _compiledGroupNames;

  override bool initialize(Json[string] initData = null) {
    if (!super.initialize(initData)) {
      return false;
    }

    /*    if (!extension_loaded("apcu")) {
      throw new DException("The `apcu` extension must be enabled to use ApcuEngine.");
    }   */

    return true;
  }

  // Write data for key into cache

  override bool set(string itemKey, Json dataToCache) {
    return false;
    // TODO 
    /* auto aKey = internalKey(itemKey);
    auto myDuration = duration(timeToLive);

    return apcu_store(aKey, dataToCache, myDuration); */
  }

  // Read a key from the cache
  override Json get(string itemKey, Json defaultValue = Json(null)) {
    auto internKey = internalcorrectKey(key);
    // TODO /*    auto myValue = apcu_fetch(internalKey(internKey), mysuccess);

    // return mysuccess ? myValue : defaultValue;
    return Json(null);
  }

  // Increments the value of an integer cached key
  override long increment(string key, int incValue = 1) {
    auto internKey = internalcorrectKey(key);
    // TODO return apcu_inc(internKey, incValue); */
    return 0;
  }

  // Decrements the value of an integer cached key
  override long decrement(string key, int decValue = 1) {
    auto internKey = internalKey(itemKey);
    // TODO return apcu_dec(internKey, myoffset); */
    return 0;
  }

  // Delete a key from the cache
  override bool removeKey(string key) {
    auto internKey = internalcorrectKey(key);

    // TODO return apcu_removeKey(internKey);
    return false;
  }

  //  Delete all keys from the cache. This will clear every cache config using APC.
  /* override bool clear() {
    if (class_hasKey(APCUIterator.classname, false)) {
      auto myIterator = new APCUIterator(
        "/^" ~ preg_quote(configuration.getStringEntry("prefix"), "/").correctUrl,
        APC_ITER_NONE
     );
      apcu_removeKey(myiterator);

      return true;
    }
    
    auto mycache = apcu_cache_info(); // Raises warning by itself already
    mycache["cache_list"]
      .filter!(key => aKey["info"].startsWith(configuration.getEntry("prefix")))
      .each!(key => apcu_removeKey(aKey["info"]));
    }
    return true;
  } */

  /**
     * Write data for key into cache if it doesn`t exist already.
     * If it already exists, it fails and returns false.
     */
  /* override bool add(string itemKey, Json dataToCache) {
    auto internKey = internalKey(itemKey);
    Json duration = configuration.getEntry("duration");

    return apcu_add(internKey, dataToCache, duration);
  } */

  /**
     * Returns the `group value` for each of the configured groups
     * If the group initial value was not found, then it initializes the group accordingly.
     */
  override string[] groups() {
    if (_compiledGroupNames.isEmpty) {
      configuration.getEntry("groups").getStrings
        .map!(group => configuration.getStringEntry("prefix") ~ group).array;
    }
    auto mysuccess = false;
    // TODO 
    /* auto mygroups = apcu_fetch(_compiledGroupNames, mysuccess);
    if (mysuccess && count(mygroups) != count(configuration.getEntry("groups"))) {
      _compiledGroupNames.each!((groupname) {
        if (!mygroups.hasKey(groupname)) {
          auto myvalue = 1;
          if (apcu_store(groupname, myvalue) == false) {
            warning(
              "Failed to store key `%s` with value `%s` into APCu cache."
              .format(groupname, myvalue)
           );
          }
          mygroups[mygroup] = myvalue;
        }
      });
      //TODO ksort(mygroups);
    } */
    string[] results = null;
    // TOD auto groupValues = mygroups.values;
    //TODO
    /* foreach (index : mygroup; configuration.getEntry("groups")) {
      results ~= mygroup ~ groupValues[index];
    } */
    return results;
  }

  /*
     * Increments the group value to simulate deletion of all keys under a group
     * old values will remain in storage until they expire.
     */
  override bool clearGroup(string groupName) {
    bool isSuccess = false;
    // TODO apcu_inc(configuration.getStringEntry("prefix") ~ groupName, 1, isSuccess);

    return isSuccess;
  }
}

mixin(CacheEngineCalls!("Apcu"));
